--
-- Embed the Lua scripts into src/host/scripts.c as static data buffers.
-- I embed the actual scripts, rather than Lua bytecodes, because the
-- bytecodes are not portable to different architectures, which causes
-- issues in Mac OS X Universal builds.
--

	-- remember where I live, so I can find the files I need
	local basedir = path.getdirectory(os.getcwd())

	local function stripfile(fname)
		local f = io.open(fname)
		local s = assert(f:read("*a"))
		f:close()

		-- strip tabs
		s = s:gsub("[\t]", "")

		-- strip any CRs
		s = s:gsub("[\r]", "")

		-- strip out block comments
		s = s:gsub("[^\"']%-%-%[%[.-%]%]", "")
		s = s:gsub("[^\"']%-%-%[=%[.-%]=%]", "")
		s = s:gsub("[^\"']%-%-%[==%[.-%]==%]", "")

		-- strip out inline comments
		s = s:gsub("\n%-%-[^\n]*", "\n")

		-- escape backslashes
		s = s:gsub("\\", "\\\\")

		-- strip duplicate line feeds
		s = s:gsub("\n+", "\n")

		-- strip out leading comments
		s = s:gsub("^%-%-[^\n]*\n", "")

		-- escape line feeds
		s = s:gsub("\n", "\\n")

		-- escape double quote marks
		s = s:gsub("\"", "\\\"")

		return s
	end


	local function appendfile(result, fname, contents)
		table.insert(result, "\t/* " .. fname .. " */\n")

		-- break up large strings to fit in Visual Studio's string length limit
		local max = 4096
		local start = 1
		local len = contents:len()
		while start <= len do
			local n = len - start
			if n > max then n = max end
			local finish = start + n

			-- make sure I don't cut an escape sequence
			while contents:sub(finish, finish) == "\\" do
				finish = finish - 1
			end

			local s = contents:sub(start, finish)
			table.insert(result, "\t\"" .. s .. iif(finish < len, "\"\n", "\",\n"))

			start = finish + 1
		end

		table.insert(result, "\n")
	end


	function doembed()

		-- Find and run the manifest file. Checks the normal search paths to
		-- allow for manifest and _premake_main customizations, then falls
		-- back to the canonical version at ../src if not found.

		local dir = os.pathsearch("_manifest.lua", _OPTIONS["scripts"], os.getenv("PREMAKE_PATH"))
		if not dir then
			dir = path.join(basedir, "src")
		end

		scripts = dofile(path.join(dir, "_manifest.lua"))

		-- Main script always goes first
		table.insert(scripts, 1, "_premake_main.lua")

		-- Convert all scripts to single in-memory string
		local result = {}
		table.insert(result, "/* Premake's Lua scripts, as static data buffers for release mode builds */\n")
		table.insert(result, "/* DO NOT EDIT - this file is autogenerated - see BUILD.txt */\n")
		table.insert(result, "/* To regenerate this file, run: premake5 embed */ \n\n")
		table.insert(result, "const char* builtin_scripts[] = {\n")

		for i, fn in ipairs(scripts) do
			local s = stripfile(path.join(dir, fn))
			appendfile(result, fn, s)
		end

		table.insert(result, "\t0\n};\n");
		result = table.concat(result)

		-- Compare it to the current contents of scripts.c; only write out
		-- a new scripts.c if there have been changes

		local oldVersion
		local scriptsFile = path.join(basedir, "src/host/scripts.c")

		local file = io.open(scriptsFile, "r")
		if file then
			oldVersion = file:read("*a")
			file:close()
		end

		if oldVersion ~= result then
			print("Writing scripts.c")
			file = io.open(scriptsFile, "w+b")
			file:write(result)
			file:close()
		end
	end
